#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/from"));

var _set = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/set"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _path = require("path");

var _crossSpawn = require("cross-spawn");

var _package = _interopRequireDefault(require("../../package.json"));

var _constants = require("../lib/constants");

if (_package.default.peerDependencies) {
  (0, _keys.default)(_package.default.peerDependencies).forEach(function (dependency) {
    try {
      // When 'npm link' is used it checks the clone location. Not the project.
      require.resolve(dependency);
    } catch (err) {
      console.warn("The module '".concat(dependency, "' was not found. Next.js requires that you include it in 'dependencies' of your 'package.json'. To add it, run 'npm install --save ").concat(dependency, "'"));
    }
  });
}

var defaultCommand = 'dev';
var commands = new _set.default(['init', 'build', 'start', 'export', defaultCommand]);
var cmd = process.argv[2];
var args = [];
var nodeArgs = [];

if (new _set.default(['--version', '-v']).has(cmd)) {
  console.log("next.js v".concat(_package.default.version));
  process.exit(0);
}

var inspectArg = process.argv.find(function (arg) {
  return arg.includes('--inspect');
});

if (inspectArg) {
  nodeArgs.push(inspectArg);
}

if (new _set.default(['--help', '-h']).has(cmd)) {
  console.log("\n    Usage\n      $ next <command>\n\n    Available commands\n      ".concat((0, _from.default)(commands).join(', '), "\n\n    For more information run a command with the --help flag\n      $ next init --help\n  "));
  process.exit(0);
}

if (commands.has(cmd)) {
  args = process.argv.slice(3);
} else {
  cmd = defaultCommand;
  args = process.argv.slice(2);
}

var defaultEnv = cmd === 'dev' ? 'development' : 'production';
process.env.NODE_ENV = process.env.NODE_ENV || defaultEnv;
var bin = (0, _path.join)(__dirname, 'next-' + cmd);

var startProcess = function startProcess() {
  var proc = (0, _crossSpawn.spawn)('node', nodeArgs.concat([bin], (0, _toConsumableArray2.default)(args)), {
    stdio: 'inherit',
    customFds: [0, 1, 2]
  });
  proc.on('close', function (code, signal) {
    if (code !== null) {
      process.exit(code);
    }

    if (signal) {
      if (signal === 'SIGKILL') {
        process.exit(137);
      }

      console.log("got signal ".concat(signal, ", exiting"));
      process.exit(signal === 'SIGINT' ? 0 : 1);
    }

    process.exit(0);
  });
  proc.on('error', function (err) {
    console.error(err);
    process.exit(1);
  });
  return proc;
};

var proc = startProcess();

var wrapper = function wrapper() {
  if (proc) {
    proc.kill();
  }
};

process.on('SIGINT', wrapper);
process.on('SIGTERM', wrapper);
process.on('exit', wrapper);

if (cmd === 'dev') {
  var _require = require('fs'),
      watchFile = _require.watchFile;

  watchFile("".concat(process.cwd(), "/").concat(_constants.CONFIG_FILE), function (cur, prev) {
    if (cur.size > 0 || prev.size > 0) {
      console.log("\n> Found a change in ".concat(_constants.CONFIG_FILE, ", restarting the server...")); // Don't listen to 'close' now since otherwise parent gets killed by listener

      proc.removeAllListeners('close');
      proc.kill();
      proc = startProcess();
    }
  });
}